/* eslint-disable no-undef */

describe('Service Worker Tests', () => {
  let clientsMock;
  let registrationMock;
  let cryptoMock;
  let fetchMock;
  let messageChannelMock;
  let port1Mock;
  let port2Mock;

  beforeEach(() => {
    // Mock the 'self' object and its properties
    global.self = {
      addEventListener: jest.fn(),
      skipWaiting: jest.fn(),
      clients: {
        claim: jest.fn(),
        get: jest.fn(),
        matchAll: jest.fn(),
      },
      registration: {
        unregister: jest.fn(),
      },
      crypto: {
        randomUUID: jest.fn(() => 'mock-uuid'),
      },
      fetch: jest.fn(),
      MessageChannel: jest.fn(),
      postMessage: jest.fn(),
    };

    // Reset mocks before each test
    clientsMock = global.self.clients;
    registrationMock = global.self.registration;
    cryptoMock = global.self.crypto;
    fetchMock = global.self.fetch;
    messageChannelMock = global.self.MessageChannel;
    port1Mock = { onmessage: jest.fn() };
    port2Mock = {};
    messageChannelMock.mockReturnValue({ port1: port1Mock, port2: port2Mock });

    // Import the service worker script (as a module to access its scope)
    jest.isolateModules(() => {
      require('./your-service-worker-file.js'); // Replace with the actual path
    });
  });

  afterEach(() => {
    // Clean up the global 'self' object
    delete global.self;
  });

  describe('install event', () => {
    test('should call skipWaiting', () => {
      const installListener = global.self.addEventListener.mock.calls.find(
        (call) => call[0] === 'install',
      )[1];
      installListener();
      expect(global.self.skipWaiting).toHaveBeenCalled();
    });
  });

  describe('activate event', () => {
    test('should call clients.claim with waitUntil', () => {
      const activateListener = global.self.addEventListener.mock.calls.find(
        (call) => call[0] === 'activate',
      )[1];
      const mockEvent = { waitUntil: jest.fn() };
      activateListener(mockEvent);
      expect(mockEvent.waitUntil).toHaveBeenCalledWith(clientsMock.claim());
    });
  });

  describe('message event', () => {
    let messageListener;
    let mockClient;

    beforeEach(() => {
      messageListener = global.self.addEventListener.mock.calls.find(
        (call) => call[0] === 'message',
      )[1];
      mockClient = { id: 'client-1', postMessage: jest.fn(), frameType: 'window' };
      clientsMock.get.mockResolvedValue(mockClient);
      clientsMock.matchAll.mockResolvedValue([mockClient]);
    });

    test('should return early if no clientId or clients', async () => {
      const mockEventWithoutId = { source: {} };
      await messageListener(mockEventWithoutId);
      expect(clientsMock.get).not.toHaveBeenCalled();
    });

    test('should return early if client is not found', async () => {
      clientsMock.get.mockResolvedValue(undefined);
      const mockEvent = { source: { id: 'client-1' } };
      await messageListener(mockEvent);
      expect(mockClient.postMessage).not.toHaveBeenCalled();
    });

    test('should handle KEEPALIVE_REQUEST', async () => {
      const mockEvent = { source: { id: 'client-1' }, data: 'KEEPALIVE_REQUEST' };
      await messageListener(mockEvent);
      expect(mockClient.postMessage).toHaveBeenCalledWith(
        { type: 'KEEPALIVE_RESPONSE' },
        [],
      );
    });

    test('should handle INTEGRITY_CHECK_REQUEST', async () => {
      const mockEvent = { source: { id: 'client-1' }, data: 'INTEGRITY_CHECK_REQUEST' };
      await messageListener(mockEvent);
      expect(mockClient.postMessage).toHaveBeenCalledWith(
        {
          type: 'INTEGRITY_CHECK_RESPONSE',
          payload: {
            packageVersion: '2.6.4',
            checksum: 'ca7800994cc8bfb5eb961e037c877074',
          },
        },
        [],
      );
    });

    test('should handle MOCK_ACTIVATE', async () => {
      const mockEvent = { source: { id: 'client-1' }, data: 'MOCK_ACTIVATE' };
      await messageListener(mockEvent);
      expect(global.self.activeClientIds.has('client-1')).toBe(true);
      expect(mockClient.postMessage).toHaveBeenCalledWith(
        {
          type: 'MOCKING_ENABLED',
          payload: {
            client: {
              id: 'client-1',
              frameType: 'window',
            },
          },
        },
        [],
      );
    });

    test('should handle MOCK_DEACTIVATE', async () => {
      global.self.activeClientIds = new Set(['client-1']);
      const mockEvent = { source: { id: 'client-1' }, data: 'MOCK_DEACTIVATE' };
      await messageListener(mockEvent);
      expect(global.self.activeClientIds.has('client-1')).toBe(false);
    });

    test('should handle CLIENT_CLOSED and unregister when no remaining clients', async () => {
      global.self.activeClientIds = new Set(['client-1']);
      clientsMock.matchAll.mockResolvedValue([]);
      const mockEvent = { source: { id: 'client-1' }, data: 'CLIENT_CLOSED' };
      await messageListener(mockEvent);
      expect(global.self.activeClientIds.has('client-1')).toBe(false);
      expect(registrationMock.unregister).toHaveBeenCalled();
    });

    test('should handle CLIENT_CLOSED and not unregister with remaining clients', async () => {
      global.self.activeClientIds = new Set(['client-1', 'client-2']);
      const mockOtherClient = { id: 'client-2' };
      clientsMock.matchAll.mockResolvedValue([mockOtherClient]);
      const mockEvent = { source: { id: 'client-1' }, data: 'CLIENT_CLOSED' };
      await messageListener(mockEvent);
      expect(global.self.activeClientIds.has('client-1')).toBe(false);
      expect(registrationMock.unregister).not.toHaveBeenCalled();
    });
  });

  describe('fetch event', () => {
    let fetchListener;
    let mockEvent;

    beforeEach(() => {
      fetchListener = global.self.addEventListener.mock.calls.find(
        (call) => call[0] === 'fetch',
      )[1];
      mockEvent = {
        request: {
          mode: 'same-origin',
          cache: 'default',
          url: 'https://example.com/api/data',
          headers: new Headers(),
        },
        respondWith: jest.fn(),
        clientId: 'client-1',
      };
      global.self.activeClientIds = new Set(['client-1']);
      clientsMock.get.mockResolvedValue({ id: 'client-1', postMessage: jest.fn() });
    });

    test('should bypass navigation requests', () => {
      mockEvent.request.mode = 'navigate';
      fetchListener(mockEvent);
      expect(mockEvent.respondWith).not.toHaveBeenCalled();
    });

    test('should bypass "only-if-cached" requests not from same origin', () => {
      mockEvent.request.cache = 'only-if-cached';
      mockEvent.request.mode = 'cors';
      fetchListener(mockEvent);
      expect(mockEvent.respondWith).not.toHaveBeenCalled();
    });

    test('should bypass all requests when no active clients', () => {
      global.self.activeClientIds = new Set();
      fetchListener(mockEvent);
      expect(mockEvent.respondWith).not.toHaveBeenCalled();
    });

    test('should call handleRequest and respond with its result', () => {
      const mockResponse = new Response('mocked data');
      const handleRequestMock = jest.fn().mockResolvedValue(mockResponse);
      // Mock the module to return our mock handleRequest
      jest.isolateModules(() => {
        const originalModule = require('./your-service-worker-file.js');
        originalModule.handleRequest = handleRequestMock;
        // Re-require to get the mocked version within this context
        require('./your-service-worker-file.js');
      });
      fetchListener(mockEvent);
      expect(handleRequestMock).toHaveBeenCalledWith(mockEvent, 'mock-uuid');
      // Wait for the promise to resolve before checking respondWith
      return Promise.resolve().then(() => {
        expect(mockEvent.respondWith).toHaveBeenCalledWith(mockResponse);
      });
    });
  });

  describe('handleRequest function', () => {
    let mockEvent;
    let mockClient;

    beforeEach(() => {
      mockClient = { id: 'client-1', postMessage: jest.fn() };
      clientsMock.get.mockResolvedValue(mockClient);
      clientsMock.matchAll.mockResolvedValue([mockClient]);
      global.self.activeClientIds = new Set(['client-1']);
      cryptoMock.randomUUID.mockReturnValue('mock-request-id');
      mockEvent = {
        request: {
          url: 'https://example.com/api/data',
          mode: 'cors',
          method: 'GET',
          headers: new Headers({ 'Content-Type': 'application/json' }),
          arrayBuffer: jest.fn().mockResolvedValue(new ArrayBuffer(16)),
        },
        clientId: 'client-1',
      };
    });

    test('should call resolveMainClient', async () => {
      const resolveMainClientMock = jest.fn().mockResolvedValue(mockClient);
      const getResponseMock = jest.fn().mockResolvedValue(new Response());
      jest.isolateModules(() => {
        const originalModule = require('./your-service-worker-file.js');
        originalModule.resolveMainClient = resolveMainClientMock;
        originalModule.getResponse = getResponseMock;
        require('./your-service-worker-file.js');
      });
      const handleRequestFn = require.cache[require.resolve('./your-service-worker-file.js')].exports.handleRequest;
      await handleRequestFn(mockEvent, 'mock-request-id');
      expect(resolveMainClientMock).toHaveBeenCalledWith(mockEvent);
    });

    test('should call getResponse', async () => {
      const resolveMainClientMock = jest.fn().mockResolvedValue(mockClient);
      const getResponseMock = jest.fn().mockResolvedValue(new Response());
      jest.isolateModules(() => {
        const originalModule = require('./your-service-worker-file.js');
        originalModule.resolveMainClient = resolveMainClientMock;
        originalModule.getResponse = getResponseMock;
        require('./your-service-worker-file.js');
      });
      const handleRequestFn = require.cache[require.resolve('./your-service-worker-file.js')].exports.handleRequest;
      await handleRequestFn(mockEvent, 'mock-request-id');
      expect(getResponseMock).toHaveBeenCalledWith(mockEvent, mockClient, 'mock-request-id');
    });

    test('should send RESPONSE message to client with response details if client is active', async () => {
      const mockResponseBody = new ReadableStream();
      const mockResponse = new Response(mockResponseBody, {
        status: 200,
        statusText: 'OK',
        headers: { 'Content-Type': 'application/json' },
      });
      const getResponseMock = jest.fn().mockResolvedValue(mockResponse);
      const sendToClientMock = jest.fn().mockResolvedValue({});
      jest.isolateModules(() => {
        const originalModule = require('./your-service-worker-file.js');
        originalModule.getResponse = getResponseMock;
        originalModule.sendToClient = sendToClientMock;
        require('./your-service-worker-file.js');
      });
      const handleRequestFn = require.cache[require.resolve('./your-service-worker-file.js')].exports.handleRequest;
      await handleRequestFn(mockEvent, 'mock-request-id');
      expect(sendToClientMock).toHaveBeenCalledWith(
        mockClient,
        {
          type: 'RESPONSE',
          payload: {
            requestId: 'mock-request-id',
            isMockedResponse: false,
            type: 'basic',
            status: 200,
            statusText: 'OK',
            body: mockResponseBody,
            headers: { 'content-type': 'application/json' },
          },
        },
        [mockResponseBody],
      );
      // Ensure the original response is returned
      const result = await handleRequestFn(mockEvent, 'mock-request-id');
      expect(result).toBe(mockResponse);
    });

    test('should not send RESPONSE message if client is not active', async () => {
      global.self.activeClientIds = new Set();
      const mockResponse = new Response();
      const getResponseMock = jest.fn().mockResolvedValue(mockResponse);
      const sendToClientMock = jest.fn();
      jest.isolateModules(() => {
        const originalModule = require('./your-service-worker-file.js');
        originalModule.getResponse = getResponseMock;
        originalModule.sendToClient = sendToClientMock;
        require('./your-service-worker-file.js');
      });
      const handleRequestFn = require.cache[require.resolve('./your-service-worker-file.js')].exports.handleRequest;
      await handleRequestFn(mockEvent, 'mock-request-id');
      expect(sendToClientMock).not.toHaveBeenCalled();
    });
  });

  describe('resolveMainClient function', () => {
    let resolveMainClientFn;
    let mockEvent;
    let client1;
    let client2;

    beforeEach(() => {
      client1 = { id: 'client-1', frameType: 'window', visibilityState: 'visible' };
      client2 = { id: 'client-2', frameType: 'top-level', visibilityState: 'hidden' };
      clientsMock.get.mockResolvedValue(client1);
      clientsMock.matchAll.mockResolvedValue([client1, client2]);
      global.self.activeClientIds = new Set(['client-1']);
      jest.isolateModules(() => {
        resolveMainClientFn = require('./your-service-worker-file.js').resolveMainClient;
      });
      mockEvent = { clientId: 'client-1' };
    });

    test('should return the client if its ID is in activeClientIds', async () => {
      const result = await resolveMainClientFn(mockEvent);
      expect(result).toBe(client1);
    });

    test('should return the client if its frameType is "top-level" and not in activeClientIds', async () => {
      global.self.activeClientIds = new Set();
      clientsMock.get.mockResolvedValue(client2);
      mockEvent.clientId = 'client-2';
      const result = await resolveMainClientFn(mockEvent);
      expect(result).toBe(client2);
    });

    test('should return the visible client whose ID is in activeClientIds', async () => {
      const client3 = { id: 'client-3', frameType: 'window', visibilityState: 'visible' };
      clientsMock.matchAll.mockResolvedValue([client2, client3]);
      global.self.activeClientIds = new Set(['client-3']);
      clientsMock.get.mockResolvedValue(undefined); // Simulate initial clientId not being active
      const result = await resolveMainClientFn({ clientId: 'some-id' });
      expect(result).toBe(client3);
    });

    test('should return undefined if no matching visible active client is found', async () => {
      clientsMock.matchAll.mockResolvedValue([client2, { id: 'client-4', frameType: 'window', visibilityState: 'hidden' }]);
      global.self.activeClientIds = new Set(['client-1']);
      clientsMock.get.mockResolvedValue(undefined);
      const result = await resolveMainClientFn({ clientId: 'some-id' });
      expect(result).toBeUndefined();
    });
  });

  describe('getResponse function', () => {
    let getResponseFn;
    let mockEvent;
    let mockClient;

    beforeEach(() => {
      mockClient = { id: 'client-1', postMessage: jest.fn() };
      clientsMock.get.mockResolvedValue(mockClient);
      global.self.activeClientIds = new Set(['client-1']);
      mockEvent = {
        request: {
          url: 'https://example.com/api/data',
          method: 'GET',
          headers: new Headers(),
          clone: jest.fn().mockReturnValue
-----
({
            headers: new Headers(),
            arrayBuffer: jest.fn().mockResolvedValue(new ArrayBuffer(8)),
          }) as unknown as Request,
          arrayBuffer: jest.fn().mockResolvedValue(new ArrayBuffer(16)),
        } as Request,
      };
      fetchMock.mockResolvedValue(new Response());
      messageChannelMock.mockReturnValue({ port1: port1Mock, port2: port2Mock });
      port1Mock.onmessage.mockImplementation((event) => {
        if (event.data && event.data.type === 'MOCK_RESPONSE') {
          return Promise.resolve({ type: 'MOCK_RESPONSE', data: { body: 'mocked' } });
        }
        if (event.data && event.data.type === 'PASSTHROUGH') {
          return Promise.resolve({ type: 'PASSTHROUGH' });
        }
        return Promise.resolve({});
      });
      jest.isolateModules(() => {
        getResponseFn = require('./your-service-worker-file.js').getResponse;
        require('./your-service-worker-file.js').sendToClient = (client, message) => {
          return new Promise((resolve) => {
            port1Mock.onmessage({ data: message });
            resolve({});
          });
        };
      });
    });

    test('should call passthrough if no client is provided', async () => {
      clientsMock.get.mockResolvedValue(undefined);
      const result = await getResponseFn(mockEvent, undefined, 'mock-request-id');
      expect(fetchMock).toHaveBeenCalled();
      expect(result).toBeInstanceOf(Response);
    });

    test('should call passthrough if client is not in activeClientIds', async () => {
      global.self.activeClientIds = new Set();
      const result = await getResponseFn(mockEvent, mockClient, 'mock-request-id');
      expect(fetchMock).toHaveBeenCalled();
      expect(result).toBeInstanceOf(Response);
    });

    test('should send REQUEST message to client', async () => {
      await getResponseFn(mockEvent, mockClient, 'mock-request-id');
      expect(global.self.postMessage).toHaveBeenCalledWith(
        {
          type: 'REQUEST',
          payload: {
            id: 'mock-request-id',
            url: 'https://example.com/api/data',
            mode: 'cors',
            method: 'GET',
            headers: {},
            cache: 'default',
            credentials: 'omit',
            destination: '',
            integrity: '',
            redirect: 'follow',
            referrer: '',
            referrerPolicy: '',
            body: expect.any(ArrayBuffer),
            keepalive: false,
          },
        },
        expect.any(Array),
      );
    });

    test('should return passthrough response if client responds with PASSTHROUGH', async () => {
      global.self.postMessage.mockImplementation((message, transfer, ports) => {
        ports[0].onmessage({ data: { type: 'PASSTHROUGH' } });
      });
      const result = await getResponseFn(mockEvent, mockClient, 'mock-request-id');
      expect(fetchMock).toHaveBeenCalled();
      expect(result).toBeInstanceOf(Response);
    });

    test('should call respondWithMock if client responds with MOCK_RESPONSE', async () => {
      const respondWithMockFn = jest.fn().mockResolvedValue(new Response('mocked'));
      jest.isolateModules(() => {
        const originalModule = require('./your-service-worker-file.js');
        originalModule.respondWithMock = respondWithMockFn;
        require('./your-service-worker-file.js').sendToClient = (client, message) => {
          return new Promise((resolve) => {
            if (message.type === 'REQUEST') {
              global.self.postMessage(message, [], [port2Mock]);
              port1Mock.onmessage({ data: { type: 'MOCK_RESPONSE', data: { body: 'mocked' } } });
              resolve({});
            }
          });
        };
        require('./your-service-worker-file.js').getResponse = originalModule.getResponse;
      });
      const getResponseFn = require.cache[require.resolve('./your-service-worker-file.js')].exports.getResponse;

      const result = await getResponseFn(mockEvent, mockClient, 'mock-request-id');
      expect(respondWithMockFn).toHaveBeenCalledWith({ body: 'mocked' });
      expect(result).toBeInstanceOf(Response);
      expect(result.body).toEqual(new Response('mocked').body);
    });

    test('should return passthrough if client response type is unknown', async () => {
      global.self.postMessage.mockImplementation((message, transfer, ports) => {
        ports[0].onmessage({ data: { type: 'UNKNOWN' } });
      });
      const result = await getResponseFn(mockEvent, mockClient, 'mock-request-id');
      expect(fetchMock).toHaveBeenCalled();
      expect(result).toBeInstanceOf(Response);
    });
  });

  describe('sendToClient function', () => {
    test('should post message to the client with ports and transferrables', async () => {
      const mockClient = { postMessage: jest.fn() };
      const mockMessage = { type: 'TEST' };
      const mockTransferrable = [new ArrayBuffer(4)];
      const sendToClientFn = require('./your-service-worker-file.js').sendToClient;
      await sendToClientFn(mockClient, mockMessage, mockTransferrable);
      expect(messageChannelMock).toHaveBeenCalled();
      expect(mockClient.postMessage).toHaveBeenCalledWith(
        mockMessage,
        [port2Mock, mockTransferrable[0]],
      );
      expect(port1Mock.onmessage).toBeDefined();
    });

    test('should resolve with event data on successful message', async () => {
      const mockClient = { postMessage: jest.fn() };
      const mockMessage = { type: 'TEST' };
      const sendToClientFn = require('./your-service-worker-file.js').sendToClient;
      let resolveValue;
      port1Mock.onmessage.mockImplementation((event) => {
        resolveValue = event.data;
      });
      const result = await sendToClientFn(mockClient, mockMessage);
      expect(resolveValue).toBeUndefined(); // Resolve happens asynchronously
    });

    test('should reject with error if event data contains error', async () => {
      const mockClient = { postMessage: jest.fn() };
      const mockMessage = { type: 'TEST' };
      const sendToClientFn = require('./your-service-worker-file.js').sendToClient;
      port1Mock.onmessage.mockImplementation((event) => {
        throw event.data.error;
      });
      await expect(sendToClientFn(mockClient, mockMessage)).rejects.toBeUndefined(); // The mock throws, Jest catches
    });

    test('should handle empty transferrables array', async () => {
      const mockClient = { postMessage: jest.fn() };
      const mockMessage = { type: 'TEST' };
      const sendToClientFn = require('./your-service-worker-file.js').sendToClient;
      await sendToClientFn(mockClient, mockMessage, []);
      expect(mockClient.postMessage).toHaveBeenCalledWith(
        mockMessage,
        [port2Mock],
      );
    });

    test('should filter out null or undefined transferrables', async () => {
      const mockClient = { postMessage: jest.fn() };
      const mockMessage = { type: 'TEST' };
      const mockTransferrables = [new ArrayBuffer(4), null, undefined];
      const sendToClientFn = require('./your-service-worker-file.js').sendToClient;
      await sendToClientFn(mockClient, mockMessage, mockTransferrables);
      expect(mockClient.postMessage).toHaveBeenCalledWith(
        mockMessage,
        [port2Mock, mockTransferrables[0]],
      );
    });
  });

  describe('respondWithMock function', () => {
    let respondWithMockFn;

    beforeEach(() => {
      jest.isolateModules(() => {
        respondWithMockFn = require('./your-service-worker-file.js').respondWithMock;
      });
    });

    test('should return Response.error() if response status is 0', async () => {
      const mockResponseData = { status: 0, body: 'error' };
      const result = await respondWithMockFn(mockResponseData);
      expect(result).toEqual(Response.error());
    });

    test('should return a new Response with provided body and options', async () => {
      const mockResponseData = { status: 200, body: 'mocked data', headers: { 'Content-Type': 'text/plain' } };
      const result = await respondWithMockFn(mockResponseData);
      expect(result).toBeInstanceOf(Response);
      expect(await result.text()).toBe('mocked data');
      expect(result.status).toBe(200);
      expect(result.headers.get('Content-Type')).toBe('text/plain');
    });

    test('should define IS_MOCKED_RESPONSE property on the response', async () => {
      const mockResponseData = { status: 200, body: 'mocked data' };
      const result = await respondWithMockFn(mockResponseData);
      expect(result[Symbol('isMockedResponse')]).toBe(true);
    });

    test('should make IS_MOCKED_RESPONSE enumerable', async () => {
      const mockResponseData = { status: 200, body: 'mocked data' };
      const result = await respondWithMockFn(mockResponseData);
      const keys = Object.keys(result);
      expect(keys.includes('isMockedResponse')).toBe(true);
    });
  });
});
