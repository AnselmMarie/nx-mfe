/* eslint-disable */
/* tslint:disable */

/**
 * Mock Service Worker.
 * @see https://github.com/mswjs/msw
 * - Please do NOT modify this file.
 * - Please do NOT serve this file on production.
 */

// Add type declarations for service worker environment
declare const self: ServiceWorkerGlobalScope & typeof globalThis;
declare const crypto: Crypto;

// Service Worker type definitions
interface ServiceWorkerGlobalScope extends WorkerGlobalScope {
  clients: Clients;
  registration: ServiceWorkerRegistration;
  skipWaiting(): Promise<void>;
  addEventListener(
    type: string,
    listener: EventListener,
    options?: boolean | AddEventListenerOptions
  ): void;
}

interface WorkerGlobalScope {
  fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;
  crypto: Crypto;
}

// Crypto API interface definition
interface Crypto {
  getRandomValues<T extends ArrayBufferView | null>(array: T): T;
  subtle: SubtleCrypto;
  randomUUID(): string;
}

interface Clients {
  get(id: string): Promise<Client | undefined>;
  matchAll(options?: ClientQueryOptions): Promise<ReadonlyArray<Client>>;
  claim(): Promise<void>;
}

interface ClientQueryOptions {
  includeUncontrolled?: boolean;
  type?: 'window' | 'worker' | 'sharedworker' | 'all';
}

interface ServiceWorkerRegistration {
  unregister(): Promise<boolean>;
}

// Type definitions for service worker APIs not fully covered by standard TypeScript libraries
interface ExtendableEvent extends Event {
  waitUntil(promise: Promise<any>): void;
}

interface FetchEvent extends ExtendableEvent {
  clientId: string;
  request: Request;
  respondWith(response: Promise<Response> | Response): void;
}

interface ExtendableMessageEvent extends ExtendableEvent {
  data: any;
  origin: string;
  lastEventId: string;
  source: Client | ServiceWorker | typeof MessagePort | null;
  ports: ReadonlyArray<typeof MessagePort>;
}

interface ServiceWorker extends EventTarget {
  scriptURL: string;
  state: string;
}

interface Client {
  id: string;
  type: string;
  url: string;
  frameType: string;
  visibilityState?: string;
  postMessage(message: any, transfer?: Transferable[]): void;
}

// Extend the Request interface to include all properties used in this code
interface Request extends Body {
  cache: RequestCache;
  // credentials: RequestCredentials;
  destination: RequestDestination;
  // headers: Headers;
  integrity: string;
  keepalive: boolean;
  // method: string;
  // mode: RequestMode;
  redirect: RequestRedirect;
  // referrer: string;
  referrerPolicy: ReferrerPolicy;
  // url: string;
  clone(): Request;
}

// Define the Transferable type
type Transferable = ArrayBuffer | MessagePort | ImageBitmap;

// Add type definitions for request properties
type RequestCache =
  | 'default'
  | 'no-store'
  | 'reload'
  | 'no-cache'
  | 'force-cache'
  | 'only-if-cached';
type RequestMode = 'navigate' | 'same-origin' | 'no-cors' | 'cors';
type RequestCredentials = 'omit' | 'same-origin' | 'include';
type RequestRedirect = 'follow' | 'error' | 'manual';
type RequestDestination =
  | ''
  | 'audio'
  | 'audioworklet'
  | 'document'
  | 'embed'
  | 'font'
  | 'frame'
  | 'iframe'
  | 'image'
  | 'manifest'
  | 'object'
  | 'paintworklet'
  | 'report'
  | 'script'
  | 'serviceworker'
  | 'sharedworker'
  | 'style'
  | 'track'
  | 'video'
  | 'worker'
  | 'xslt';
type ReferrerPolicy =
  | ''
  | 'no-referrer'
  | 'no-referrer-when-downgrade'
  | 'origin'
  | 'origin-when-cross-origin'
  | 'same-origin'
  | 'strict-origin'
  | 'strict-origin-when-cross-origin'
  | 'unsafe-url';

// Main MSW Service Worker code
const PACKAGE_VERSION = '2.6.4';
const INTEGRITY_CHECKSUM = 'ca7800994cc8bfb5eb961e037c877074';
const IS_MOCKED_RESPONSE = Symbol('isMockedResponse');
const activeClientIds = new Set<string>();

interface ClientMessage {
  type: string;
  payload?: any;
}

interface ClientResponseMessage {
  type: string;
  data?: any;
  error?: Error;
}

interface MockResponseData {
  status: number;
  statusText: string;
  headers: Record<string, string>;
  body: any; // Ensure the body type supports transferable objects
}

self.addEventListener('install', function (): void {
  self.skipWaiting();
});

self.addEventListener('activate', function (event: ExtendableEvent): void {
  event.waitUntil(self.clients.claim());
});

self.addEventListener('message', async function (event: ExtendableMessageEvent): Promise<void> {
  const clientId = (event.source as Client)?.id;

  if (!clientId || !self.clients) {
    return;
  }

  const client = await self.clients.get(clientId);

  if (!client) {
    return;
  }

  const allClients = await self.clients.matchAll({
    type: 'window',
  });

  switch (event.data) {
    case 'KEEPALIVE_REQUEST': {
      sendToClient(client, {
        type: 'KEEPALIVE_RESPONSE',
      });
      break;
    }

    case 'INTEGRITY_CHECK_REQUEST': {
      sendToClient(client, {
        type: 'INTEGRITY_CHECK_RESPONSE',
        payload: {
          packageVersion: PACKAGE_VERSION,
          checksum: INTEGRITY_CHECKSUM,
        },
      });
      break;
    }

    case 'MOCK_ACTIVATE': {
      activeClientIds.add(clientId);

      sendToClient(client, {
        type: 'MOCKING_ENABLED',
        payload: {
          client: {
            id: client.id,
            frameType: client.frameType,
          },
        },
      });
      break;
    }

    case 'MOCK_DEACTIVATE': {
      activeClientIds.delete(clientId);
      break;
    }

    case 'CLIENT_CLOSED': {
      activeClientIds.delete(clientId);

      const remainingClients = Array.from(allClients).filter((client) => {
        return client.id !== clientId;
      });

      // Unregister itself when there are no more clients
      if (remainingClients.length === 0) {
        self.registration.unregister();
      }

      break;
    }
  }
});

self.addEventListener('fetch', function (event: FetchEvent): void {
  const { request } = event;

  // Bypass navigation requests.
  if (request.mode === 'navigate') {
    return;
  }

  // Opening the DevTools triggers the "only-if-cached" request
  // that cannot be handled by the worker. Bypass such requests.
  if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {
    return;
  }

  // Bypass all requests when there are no active clients.
  // Prevents the self-unregistered worked from handling requests
  // after it's been deleted (still remains active until the next reload).
  if (activeClientIds.size === 0) {
    return;
  }

  // Generate unique request ID.
  const requestId = crypto.randomUUID();
  event.respondWith(handleRequest(event, requestId));
});

async function handleRequest(event: FetchEvent, requestId: string): Promise<Response> {
  const client = await resolveMainClient(event);
  const response = await getResponse(event, client, requestId);

  // Send back the response clone for the "response:*" life-cycle events.
  // Ensure MSW is active and ready to handle the message, otherwise
  // this message will pend indefinitely.
  if (client && activeClientIds.has(client.id)) {
    (async function (): Promise<void> {
      const responseClone = response.clone();

      sendToClient(
        client,
        {
          type: 'RESPONSE',
          payload: {
            requestId,
            isMockedResponse: IS_MOCKED_RESPONSE in response,
            type: responseClone.type,
            status: responseClone.status,
            statusText: responseClone.statusText,
            body: responseClone.body, // Keep responseClone.body
            headers: Object.fromEntries(responseClone.headers.entries()),
          },
        },
        [responseClone.body as Transferable] // Explicitly cast body as Transferable
      );
    })();
  }

  return response;
}

// Resolve the main client for the given event.
// Client that issues a request doesn't necessarily equal the client
// that registered the worker. It's with the latter the worker should
// communicate with during the response resolving phase.
async function resolveMainClient(event: FetchEvent): Promise<Client | undefined> {
  const client = await self.clients.get(event.clientId);

  if (activeClientIds.has(event.clientId)) {
    return client;
  }

  if (client?.frameType === 'top-level') {
    return client;
  }

  const allClients = await self.clients.matchAll({
    type: 'window',
  });

  return Array.from(allClients as Client[])
    .filter((client) => {
      // Get only those clients that are currently visible.
      return client.visibilityState === 'visible';
    })
    .find((client) => {
      // Find the client ID that's recorded in the
      // set of clients that have registered the worker.
      return activeClientIds.has(client.id);
    });
}

async function getResponse(
  event: FetchEvent,
  client: Client | undefined,
  requestId: string
): Promise<Response> {
  const { request } = event;

  // Clone the request because it might've been already used
  // (i.e. its body has been read and sent to the client).
  const requestClone = request.clone();

  function passthrough(): Promise<Response> {
    // Cast the request headers to a new Headers instance
    // so the headers can be manipulated with.
    const headers = new Headers(requestClone.headers);

    // Remove the "accept" header value that marked this request as passthrough.
    // This prevents request alteration and also keeps it compliant with the
    // user-defined CORS policies.
    headers.delete('accept');

    return fetch(requestClone, { headers });
  }

  // Bypass mocking when the client is not active.
  if (!client) {
    return passthrough();
  }

  // Bypass initial page load requests (i.e. static assets).
  // The absence of the immediate/parent client in the map of the active clients
  // means that MSW hasn't dispatched the "MOCK_ACTIVATE" event yet
  // and is not ready to handle requests.
  if (!activeClientIds.has(client.id)) {
    return passthrough();
  }

  // Notify the client that a request has been intercepted.
  const requestBuffer = await request.arrayBuffer();
  const clientMessage = await sendToClient(
    client,
    {
      type: 'REQUEST',
      payload: {
        id: requestId,
        url: request.url,
        mode: request.mode,
        method: request.method,
        headers: Object.fromEntries(request.headers.entries()),
        cache: request.cache,
        credentials: request.credentials,
        destination: request.destination,
        integrity: request.integrity,
        redirect: request.redirect,
        referrer: request.referrer,
        referrerPolicy: request.referrerPolicy,
        body: requestBuffer,
        keepalive: request.keepalive,
      },
    },
    [requestBuffer]
  );

  switch (clientMessage.type) {
    case 'MOCK_RESPONSE': {
      return respondWithMock(clientMessage.data);
    }

    case 'PASSTHROUGH': {
      return passthrough();
    }

    default: {
      return passthrough();
    }
  }
}

function sendToClient(
  client: Client,
  message: ClientMessage,
  transferrables: Array<Transferable | null> = []
): Promise<ClientResponseMessage> {
  return new Promise((resolve, reject) => {
    const channel = new MessageChannel();

    channel.port1.onmessage = (event: MessageEvent) => {
      if (event.data && event.data.error) {
        return reject(event.data.error);
      }

      resolve(event.data);
    };

    client.postMessage(
      message,
      [channel.port2].concat(transferrables.filter(Boolean) as Transferable[])
    );
  });
}

async function respondWithMock(response: MockResponseData): Promise<Response> {
  // Setting response status code to 0 is a no-op.
  // However, when responding with a "Response.error()", the produced Response
  // instance will have status code set to 0. Since it's not possible to create
  // a Response instance with status code 0, handle that use-case separately.
  if (response.status === 0) {
    return Response.error();
  }

  const mockedResponse = new Response(response.body, response);

  Reflect.defineProperty(mockedResponse, IS_MOCKED_RESPONSE, {
    value: true,
    enumerable: true,
  });

  return mockedResponse;
}
